import fs from 'fs';
import Path from 'path';
import { execSync, spawn } from 'child_process';
import { SelectedProject, SelectedProjectsObject, SelectedProjectWithHash } from './interfaces/types';
import { runDetectionWithAllTools } from './detectionTools';

const TMP_DIR_PATH = Path.join(__dirname, '../tmp');
const FAILED_PROJECTS_FILE = Path.join(__dirname, '../failed.txt');
const RESULTS_PATH = Path.join(__dirname, '../results');

export async function analyze(inputFile: string) {
    const { items: projects }: SelectedProjectsObject = JSON.parse(fs.readFileSync(inputFile, 'utf-8'));
    for (const project of projects) {
        const downloadedProject = downloadProject(project);
        const packageJsonDirs = await installDependencies(downloadedProject);
        console.log('Starting to analyze projects for vulnerabilities');
        runDetectionWithAllTools(downloadedProject, TMP_DIR_PATH, RESULTS_PATH, packageJsonDirs);
    }
}

function downloadProject(project: SelectedProject): SelectedProjectWithHash {
    // Clear tmp dir
    if (fs.existsSync(TMP_DIR_PATH)) {
        fs.rmdirSync(TMP_DIR_PATH, { recursive: true });
    }

    fs.mkdirSync(TMP_DIR_PATH);

    console.log(`Cloning project ${JSON.stringify(project, null, 2)}`);
    execSync(`git clone --depth 1 ${project.gitUrl} .`, { cwd: TMP_DIR_PATH });
    const commitHash = execSync('git rev-parse HEAD', { cwd: TMP_DIR_PATH }).toString().trim();
    return {
        ...project,
        commitHash,
    };
}

async function installDependencies(project: SelectedProjectWithHash) {
    const foundPackageJsonFilesTxt = execSync('find "$(pwd)" -name package.json -not -path "*/node_modules/*"', { cwd: TMP_DIR_PATH }).toString();
    const foundPackageJsonFiles = foundPackageJsonFilesTxt.split('\n').filter((packageJsonDir) => packageJsonDir.length > 0);
    if (foundPackageJsonFiles.length === 0) {
        throw new Error('No package.json file at all');
    }
    const installPromises = [];
    const packageJsonDirs: string[] = [];
    for (const packageDir of foundPackageJsonFiles) {
        const dir = packageDir.replace(new RegExp(`package.json$`), '');
        packageJsonDirs.push(dir);

        // Check if lock file exists and run npm ci if so. Otherwise run npm install
        console.log('CREATING AN INSTALL PROMISE');
        if (fs.existsSync(Path.join(dir, 'package-lock.json')) || fs.existsSync(Path.join(dir, 'npm-shrinkwrap.json'))) {
            installPromises.push(promisifyInstallSpawn(
                'npm',
                ['ci'],
                dir,
                (resolve, reject) => (err) => {
                    console.log('npm ci failed with error', err, project, dir);
                    console.log('Running npm install instead');
                    resolve(promisifyNpmInstall(project, dir));
                },
                (resolve, reject) => (code, signal) => {
                    if (code === 0) {
                        console.log(`Succesfully installed dependencies using npm ci in dir: ${dir}`);
                        resolve();
                    } else {
                        console.log(`Running npm ci in dir: ${dir} failed with code ${code} and signal ${signal}`);
                        reject({ code, signal });
                    }
                },
            ));
        } else {
            installPromises.push(promisifyNpmInstall(project, dir));
        }
    }

    await Promise.all(installPromises);

    return packageJsonDirs;
}

function logFailedProject(project: SelectedProjectWithHash, message: string) {
    const data = `${project.name}#${project.commitHash} - ${message}`;
    if (!fs.existsSync(FAILED_PROJECTS_FILE)) {
        fs.writeFileSync(FAILED_PROJECTS_FILE, data);
    } else {
        fs.appendFileSync(FAILED_PROJECTS_FILE, data);
    }
}

function promisifyInstallSpawn(
    cmd: string,
    args: string[],
    cwd: string,
    errorHandler: (resolve: (value: void | PromiseLike<void>) => void, reject: (reason?: any) => void) => (err: Error) => void,
    exitHandler: (resolve: (value: void | PromiseLike<void>) => void, reject: (reason?: any) => void) => (code: number | null, signal: NodeJS.Signals | null) => void,
): Promise<void> {
    const childProc = spawn(cmd, args, { cwd });
    childProc.stderr.pipe(process.stderr);
    return new Promise((resolve, reject) => {
        childProc.on('error', errorHandler(resolve, reject));
        childProc.on('exit', exitHandler(resolve, reject));
    });
}

function promisifyNpmInstall(project: SelectedProjectWithHash, cwd: string) {
    return promisifyInstallSpawn(
        'npm',
        ['install'],
        cwd,
        (resolve, reject) => (error) => {
            console.log('npm install failed with error', error, project, cwd);
            logFailedProject(project, `installing dependencies failed with error message: ${error.message}`);
            reject(error);
        },
        (resolve, reject) => (code, signal) => {
            if (code === 0) {
                console.log(`Succesfully installed dependencies using npm install in dir: ${cwd}`);
                resolve();
            } else {
                console.log(`Running npm install in dir: ${cwd} failed with code ${code} and signal ${signal}`);
                reject({ code, signal });
            }
        },
    );
}
