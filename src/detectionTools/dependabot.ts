import { DetectionToolFunction } from "../interfaces/types";
import path from 'path';
import { gql } from 'graphql-request'; 
import { spawn } from "child_process";
import { handleErrorsAndPromisify } from "./util";
import { getGitHubGraphQlClient } from "../util";

const TOOL_NAME = 'dependabot';

const func: DetectionToolFunction = async (project, projectPath, resultsPath, packageJsonDirs) => {
    let cmd = ':';
    const [owner, repo] = project.forkedGitUrl.replace('https://github.com/', '').split('/');
    const client = getGitHubGraphQlClient();
    const dependencyQuery = gql`{
        repository(owner:"${owner}", name:"${repo}") {
            dependencyGraphManifests {
                nodes {
                    blobPath
                    dependencies {
                        nodes {
                            packageManager
                            packageName
                            requirements
                        }
                        pageInfo {
                            endCursor
                            hasNextPage
                        }
                    }
                    exceedsMaxSize
                    filename
                    parseable
                }
                pageInfo {
                    endCursor
                    hasNextPage
                }
                totalCount
            }
        }
    }`;

    const res = await client.request(dependencyQuery);

    const vulnerabilityQuery = gql`{
        repository(owner:"${owner}", name:"${repo}") {
            vulnerabilityAlerts {
                nodes {
                    securityVulnerability {
                        nodes {
                            firstPatchedVersion {
                                identifier
                            }
                            package {
                                ecosystem
                                name
                            }
                            severity
                            vulnerableVersionRange
                        }
                        pageInfo {
                            endCursor
                            hasNextPage
                        }
                        totalCount
                    }
                    vulnerableManifestFilename
                    vulnerableManifestPath
                    vulnerableRequirements
                }
                pageInfo {
                    endCursor
                    hasNextPage
                }
                totalCount
            }
        }
    }`;
}

export default func;
