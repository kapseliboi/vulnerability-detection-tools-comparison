import { DetectionToolFunction } from '../interfaces/types';
import path from 'path';
import util from 'util';
import { spawn } from 'child_process';
import { handleErrorsAndPromisify } from './util';
import fs from 'fs';
import _ from 'lodash';
import { getManager } from 'typeorm';
import { ProjectError } from '../entities/projectError';
import { saveToDbWithErrorHandling } from '../util';

const readFile = util.promisify(fs.readFile);
const TOOL_NAME = 'npm audit';

interface NpmListRootObject {
    version: string;
    name: string;
    dependencies: NpmListDependencyObject
}
interface NpmListDependencyObject {
    [name: string]: {
        version: string;
        resolved?: string;
        dependencies?: NpmListDependencyObject;
    }
}

interface Dependency {
    name: string;
    version: string;
    resolved: string;
}

interface NpmAuditObject {

}

const func: DetectionToolFunction = async (project, projectPath, resultsPath, packageJsonDirs) => {
    let cmd = ':';
    const entityManager = getManager();
    for (let i = 0; i < packageJsonDirs.length; ++i) {
        const npmAuditDepsPath = path.join(resultsPath, `npmAuditDeps${i}.json`);
        const npmAuditVulnPath = path.join(resultsPath, `npmAuditVuln${i}.json`);
        const dir = packageJsonDirs[i];
        cmd = `${cmd} && cd ${dir} && ((npm ls -a --json > ${npmAuditDepsPath}) || true) && (npm audit --json > ${npmAuditVulnPath} || true)`;
    }
    const child = spawn(cmd, { cwd: projectPath, shell: true });
    await handleErrorsAndPromisify(child, project, TOOL_NAME);
    const depPromises: Promise<Buffer>[] = [];
    const auditPromises: Promise<Buffer>[] = [];
    for (let i = 0; i < packageJsonDirs.length; ++i) {
        depPromises.push(readFile(path.join(resultsPath, `npmAuditDeps${i}.json`)));
        auditPromises.push(readFile(path.join(resultsPath, `npmAuditVuln${i}.json`)));
    }
    let depObjects: NpmListRootObject[];
    let vulnObjects: NpmAuditObject[];
    try {
        depObjects = (await Promise.all(depPromises)).map((val) => JSON.parse(val.toString()));
        vulnObjects = (await Promise.all(auditPromises)).map((val) => JSON.parse(val.toString()));
    } catch (err) {
        const projectError = entityManager.create(ProjectError, {
            phase: 'DEPS/VULN - npm audit',
            project,
            message: 'Failed to read npm list and audit generated files',
        });
        await saveToDbWithErrorHandling(entityManager, ProjectError, projectError, `Failed to save to db ${JSON.stringify(projectError)}`);
        throw err;
    }

    const mergedDeps = mergeDependenciesAndConvertToArray(depObjects);
}

function mergeDependenciesAndConvertToArray(depObjects: NpmListRootObject[]) {
    const depArray: Dependency[] = [];
    for (const depObj of depObjects) {
        const deps = depObj.dependencies;
        addDependenciesToArray(deps, depArray);
    }
    return _.uniq(depArray);
}

function addDependenciesToArray(depObj: NpmListDependencyObject, arr: Dependency[]) {
    const keys = Object.keys(depObj);
    for (const key of keys) {
        const dep = depObj[key];
        if (dep.resolved) {
            arr.push({
                name: key,
                resolved: dep.resolved,
                version: dep.version,
            });
        }
        if (dep.dependencies) {
            addDependenciesToArray(dep.dependencies, arr);
        }
    }
}

export default func;
