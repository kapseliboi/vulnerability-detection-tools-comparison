import { DetectionToolFunction } from '../interfaces/types';
import path from 'path';
import util from 'util';
import { spawn } from 'child_process';
import { handleErrorsAndPromisify } from './util';
import fs from 'fs';
import semver from 'semver';
import _ from 'lodash';
import { getManager } from 'typeorm';
import { ProjectError } from '../entities/projectError';
import { saveToDbWithErrorHandling } from '../util';

const readFile = util.promisify(fs.readFile);
const writeFile = util.promisify(fs.writeFile);
const TOOL_NAME = 'npm audit';

interface NpmListRootObject {
    version: string;
    name: string;
    dependencies: NpmListDependencyObject
}
interface NpmListDependencyObject {
    [name: string]: {
        version: string;
        resolved?: string;
        dependencies?: NpmListDependencyObject;
    }
}

interface Dependency {
    name: string;
    version: string;
    resolved: string;
}

interface NpmAuditVulnerability {
    name: string;
    severity: string;
    via: {
        source: number;
        name: string;
        dependency: string;
        title: string;
        url: string;
        severity: string;
        range: string;
    }[] | string;
    effects: string[];
    range: string;
    nodes: string[];
    fixAvailable: boolean;
}

interface NpmAuditVulnerabilityWithVersion extends NpmAuditVulnerability {
    versions?: string[];
}

interface NpmAuditObject {
    auditReportVersion: number;
    vulnerabilities: {
        [name: string]: NpmAuditVulnerability;
    };
    metadata: {
        vulnerabilities: {
          info: number;
          low: number;
          moderate: number;
          high: number;
          critical: number;
          total: number;        },
        dependencies: {
          prod: number;
          dev: number;
          optional: number;
          peer: number;
          peerOptional: number;
          total: number;
        }
    }
}

const func: DetectionToolFunction = async (project, projectPath, resultsPath, packageJsonDirs) => {
    let cmd = ':';
    const entityManager = getManager();
    const depFilePaths: string[] = [];
    const vulnFilePaths: string[] = [];
    const npmRawResultsPath = path.join(resultsPath, 'npmAuditRaw');
    ensureDirExists(npmRawResultsPath);
    for (let i = 0; i < packageJsonDirs.length; ++i) {
        const npmAuditDepsPath = path.join(npmRawResultsPath, `npmAuditDeps${i}.json`);
        const npmAuditVulnPath = path.join(npmRawResultsPath, `npmAuditVuln${i}.json`);
        depFilePaths.push(npmAuditDepsPath);
        vulnFilePaths.push(npmAuditVulnPath);
        const dir = packageJsonDirs[i];
        cmd = `${cmd} && cd ${dir} && ((npm ls -a --json > ${npmAuditDepsPath}) || true) && (npm audit --json > ${npmAuditVulnPath} || true)`;
    }
    const child = spawn(cmd, { cwd: projectPath, shell: true });
    await handleErrorsAndPromisify(child, project, TOOL_NAME);
    const depPromises: Promise<Buffer>[] = [];
    const auditPromises: Promise<Buffer>[] = [];
    for (let i = 0; i < packageJsonDirs.length; ++i) {
        depPromises.push(readFile(depFilePaths[i]));
        auditPromises.push(readFile(vulnFilePaths[i]));
    }
    let depObjects: NpmListRootObject[];
    let vulnObjects: NpmAuditObject[];
    try {
        depObjects = (await Promise.all(depPromises)).map((val) => JSON.parse(val.toString()));
        vulnObjects = (await Promise.all(auditPromises)).map((val) => JSON.parse(val.toString()));
    } catch (err) {
        const projectError = entityManager.create(ProjectError, {
            phase: 'DEPS/VULN - npm audit',
            project,
            message: 'Failed to read npm list and audit generated files',
        });
        await saveToDbWithErrorHandling(entityManager, ProjectError, projectError, `Failed to save to db ${JSON.stringify(projectError)}`);
        throw err;
    }

    const mergedDeps = mergeDependenciesAndConvertToArray(depObjects);
    const mergedVulns = mergeVulnerabilitiesAndConvertToArray(vulnObjects);
    await writeFile(path.join(resultsPath, 'npmAuditDeps.json'), JSON.stringify(mergedDeps, null, 2));
    await writeFile(path.join(resultsPath, 'npmAuditVulnTest.json'), JSON.stringify(mergedVulns, null, 2));
    console.log(`${TOOL_NAME} - Enriching vulnerabilities with version information`);
    const vulnsWithVersionInfo = enrichVulnerabilitiesWithVersionInfo(mergedDeps, mergedVulns);
    console.log(`${TOOL_NAME} - Writing final results to disk`);
    await writeFile(path.join(resultsPath, 'npmAuditVuln.json'), JSON.stringify(vulnsWithVersionInfo, null, 2));
}

function ensureDirExists(dir: string) {
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
    }
}


function mergeDependenciesAndConvertToArray(depObjects: NpmListRootObject[]) {
    const depArray: Dependency[] = [];
    for (const depObj of depObjects) {
        const deps = depObj.dependencies;
        addDependenciesToArray(deps, depArray);
    }
    return _.sortBy(
        _.uniqWith(depArray, (a, b) => a.name === b.name && a.version === b.version && a.resolved === b.resolved),
        ['name', 'version'],
    );
}

function addDependenciesToArray(depObj: NpmListDependencyObject, arr: Dependency[]) {
    const keys = Object.keys(depObj);
    for (const key of keys) {
        const dep = depObj[key];
        if (dep.resolved) {
            arr.push({
                name: key,
                resolved: dep.resolved,
                version: dep.version,
            });
        }
        if (dep.dependencies) {
            addDependenciesToArray(dep.dependencies, arr);
        }
    }
}

function mergeVulnerabilitiesAndConvertToArray(vulnObjects: NpmAuditObject[]) {
    const arr: NpmAuditVulnerability[] = [];
    for (const vulnObj of vulnObjects) {
        const keys = Object.keys(vulnObj.vulnerabilities);
        for (const key of keys) {
            arr.push(vulnObj.vulnerabilities[key]);
        }
    }
    return _.sortBy(arr, ['name']);
}

function enrichVulnerabilitiesWithVersionInfo(deps: Dependency[], vulns: NpmAuditVulnerabilityWithVersion[]) {
    let i = 0;
    let k = 0;
    let multipleVulnerabilitiesInSameDep = false;
    let depIndexForMultipleVulnsInSameDep = 0;
    while (i < deps.length && k < vulns.length) {
        const vuln = vulns[k];
        const dep = deps[i];
        if (vuln.name === dep.name) {
            if (semver.satisfies(dep.version, vuln.range)) {
                if (vuln.versions) {
                    vuln.versions.push(dep.version);
                } else {
                    vuln.versions = [dep.version];
                }
            }
            ++i;
        } else if (dep.name > vuln.name) {
            if (!vuln.versions?.length) {
                throw new Error(`Npm audit version information missing for vulnerability ${JSON.stringify(vuln)} when dep ${JSON.stringify(dep)}`);
            }
            if (multipleVulnerabilitiesInSameDep) {
                multipleVulnerabilitiesInSameDep = false;
                i = depIndexForMultipleVulnsInSameDep;
            }
            ++k;
            if (k < vulns.length - 1 && vulns[k].name === vulns[k + 1].name) {
                multipleVulnerabilitiesInSameDep = true;
                depIndexForMultipleVulnsInSameDep = i;
            }
        } else {
            ++i;
        }
    }
    return vulns;
}

export default func;
