import { ChildProcess } from "child_process";
import { getManager } from "typeorm";
import { Project } from "../entities/project";
import { ProjectError } from "../entities/projectError";
import { defaultDatabaseErrorHandler } from "../util";

export function handleErrorsAndPromisify(childProc: ChildProcess, project: Project, toolName: string) {
    const entityManager = getManager();
    return new Promise<void>((resolve, reject) => {
        childProc.on('exit', async (code, signal) => {
            if (code === 0 ) {
                console.log(`Command deps/vuln analysis completed successfully for project "${project.gitUrl} ${project.commitHash}" with tool ${toolName}`);
                resolve();
            } else {
                const projectError = entityManager.create(ProjectError, {
                    project,
                    phase: 'DEPS/VULN',
                    message: `Error while running deps/vuln analysis for project "${project.gitUrl} ${project.commitHash}" with tool ${toolName}. Error code ${code} and signal ${signal}`,
                });
                try {
                    console.log(`Error while running deps/vuln analysis for project "${project.gitUrl} ${project.commitHash}" with tool ${toolName}. Saving error to database`);
                    await entityManager.save(ProjectError, projectError);
                } catch (err) {
                    defaultDatabaseErrorHandler(getDatabaseErrorMsg(project, toolName, err.message || ''));
                }
                reject();
            }
        });

        childProc.on('error', async (err) => {
            const projectError = entityManager.create(ProjectError, {
                project,
                phase: 'DEPS/VULN',
                message: err.message,
            });
    
            try {
                console.log(`Error while running deps/vuln analysis for project "${project.gitUrl} ${project.commitHash}" with tool ${toolName}. Saving error to database`);
                await entityManager.save(ProjectError, projectError);
            } catch (error) {
                defaultDatabaseErrorHandler(getDatabaseErrorMsg(project, toolName, err.message || ''));
            }
            reject();
        });
    });

}

function getDatabaseErrorMsg(project: Project, toolName: string, errorMsg: string) {
    return `Connection to database lost while handling deps/vuln scanning error unrelated to database connection for project "${project.gitUrl} ${project.commitHash}" with tool ${toolName}. The error had message: ${errorMsg}`
}

