import { ChildProcess } from 'child_process';
import { getManager } from 'typeorm';
import { DetectionTool } from '../entities/detectionTool';
import { Project } from '../entities/project';
import { ProjectError } from '../entities/projectError';
import { saveToDbWithErrorHandling } from '../util';

export function handleErrorsAndPromisify(childProc: ChildProcess, project: Project, toolName: string) {
    console.log(`Starting analysis with tool ${toolName}`);
    const entityManager = getManager();
    return new Promise<void>((resolve, reject) => {
        childProc.on('exit', async (code, signal) => {
            if (code === 0 ) {
                console.log(`Command deps/vuln analysis completed successfully for project "${project.name} ${project.commitHash}" with tool ${toolName}`);
                resolve();
            } else {
                const projectError = entityManager.create(ProjectError, {
                    project,
                    phase: 'DEPS/VULN',
                    message: `Error while running deps/vuln analysis for project "${project.name} ${project.commitHash}" with tool ${toolName}. Error code ${code} and signal ${signal}`,
                });
                console.log(`Error while running deps/vuln analysis for project "${project.name} ${project.commitHash}" with tool ${toolName}. Saving error to database`);
                await saveToDbWithErrorHandling(entityManager, ProjectError, projectError);
                reject();
            }
        });

        childProc.on('error', async (err) => {
            const projectError = entityManager.create(ProjectError, {
                project,
                phase: 'DEPS/VULN',
                message: err.message,
            });
    
            console.log(`Error while running deps/vuln analysis for project "${project.name} ${project.commitHash}" with tool ${toolName}. Saving error to database`);
            await saveToDbWithErrorHandling(entityManager, ProjectError, projectError);
            reject();
        });
    });

}

export async function getDetectionToolBase(toolName: string, version: string) {
    const entityManager = getManager();
    const tool = await entityManager.findOne(DetectionTool, { where: { name: toolName, version }});
    if (!tool) {
        const newTool = entityManager.create(DetectionTool, {
            name: toolName,
            version,
        });
        return entityManager.save(newTool);
    }
    return tool;
}
