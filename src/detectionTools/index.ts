import owaspDc from './owaspDc';
import npmAudit from './npmAudit';
import owaspDt from './owaspDt';
import snyk from './snyk';
import whiteSource from './whitesource';
import dependabot from './dependabot';
import config from '../config';
import fs from 'fs';
import path from 'path';
import { Project } from '../entities/project';
import { getManager } from 'typeorm';
import { checkPromisesForErrors, saveToDbWithErrorHandling } from '../util';
import { DetectionToolModule } from '../interfaces/types';

const tools: DetectionToolModule[] = [
    //owaspDc,
    //owaspDt,
    npmAudit,
    // snyk,
    // whiteSource,
    // dependabot,
];

export async function runDetectionWithAllTools(project: Project, packageJsonDirs: string[]) {
    const projectPath = config.TMP_DIR_PATH;
    const resultsPath = config.RESULTS_PATH;
    const projectResultsPath = ensureResultsFolderIsReady(project, resultsPath);
    const projectAnalysisPromises: Promise<void>[] = [];
    for (const tool of tools) {
        const dbTool = await tool.getDetectionTool();
        console.log(`Starting analyze with ${dbTool.name} ${dbTool.version}`);
        projectAnalysisPromises.push(
            tool.runScan(project, projectPath, projectResultsPath, packageJsonDirs, dbTool)
                .then(() => { console.log(`${dbTool.name} executed successfully`); })    
        );
    }

    const entityManager = getManager();

    try {
        const promises = await Promise.allSettled(projectAnalysisPromises);
        checkPromisesForErrors(promises);
        project.lastSuccessfulAnalysis = new Date();
        await saveToDbWithErrorHandling(entityManager, Project, project);
    } catch (err) {
        console.log(`Project analysis failed with error: ${err && err.message} ${err && err.stack}`);
    }
}

function ensureResultsFolderIsReady(project: Project, resultsPath: string) {
    if (!fs.existsSync(resultsPath)) {
        fs.mkdirSync(resultsPath);
    }

    const projectResultsPath = path.join(resultsPath, project.name, project.commitHash);
    if (!fs.existsSync(projectResultsPath)) {
        fs.mkdirSync(projectResultsPath, { recursive: true });
    }
    return projectResultsPath;
}
