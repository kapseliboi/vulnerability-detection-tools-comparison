import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';
import { createConnections, getConnectionOptions } from 'typeorm';
import { analyze } from './commands/analyze';
import { select } from './commands/select';
import config from './config';
import { CliAnalyzeOptions, CliSelectOptions } from './interfaces/types';

import 'reflect-metadata';
import { tools } from './detectionTools';

async function initDbConnection() {
    const connectionOptions = await getConnectionOptions();
    Object.assign(connectionOptions, {
        entities: config.usingTsNode ? ['src/entities/**/*.ts'] : ['build/entities/**/*.js'],
        migrations: config.usingTsNode ? ['src/migrations/**/*.ts'] : ['build/migrations/**/*.js'],
    });
    const connectionOpts = tools.map((toolModule) => ({
       ...connectionOptions,
       name: toolModule.TOOL_NAME, 
    }));
    connectionOpts.push({
        ...connectionOptions,
        name: 'default',
    });
    await createConnections(connectionOpts);
}

async function main() {
    console.log('Initializing database connection');
    await initDbConnection();
    console.log('Initialize yargs for parsing commands');
    const _argv = yargs(hideBin(process.argv))
        .command<CliAnalyzeOptions>(
            'analyze',
            'Analyze projects from database or from an input JSON file',
            (analyzeYargs) => {
                analyzeYargs.positional('inputFile', { type: 'string', describe: 'path to project input file' });
                analyzeYargs.options('skip', { type: 'number', describe: 'Skip x amount of projects' });
                analyzeYargs.options('take', { type: 'number', describe: 'Only analyze x amount of projects'});
                analyzeYargs.options('no-download-or-install', { type: 'boolean', default: false, describe: 'Trust that the project is already in the TMP_DIR. This only works for a single project'});
            },
            async (argv) => {
                await analyze({
                    skip: argv.skip,
                    take: argv.take,
                    inputFile: argv.inputFile,
                    noDownloadOrInstall: argv.noDownloadOrInstall,
                });
                process.exit(0);
            })
        .command<CliSelectOptions>(
            'select [inputFile]',
            'Select projects from a JSON file',
            (selectYargs) => {
                selectYargs.positional('inputFile', { type: 'string', describe: 'path to project input file' })
                    .demandOption('inputFile');
                selectYargs.options('minDepCount', { type: 'number', default: 100, describe: 'Minimum amount of dependencies the project has to have. Default value is 100' });
                selectYargs.options('no-download-or-install', { type: 'boolean', default: false, describe: 'Trust that the project is already in the TMP_DIR. This only works for a single project'});
            },
            async (argv) => {
                await select({
                    inputFile: argv.inputFile,
                    minDepCount: argv.minDepCount,
                    noDownloadOrInstall: argv.noDownloadOrInstall,
                });
                process.exit(0);
            }
        )
        .help('h')
        .alias('h', 'help')
        .argv;
}

main();