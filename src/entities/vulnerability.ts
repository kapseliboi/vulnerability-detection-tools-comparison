import { Column, CreateDateColumn, Entity, ManyToMany, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';
import { Dependency } from './dependency';
import { DetectionTool } from './detectionTool';
import { Project } from './project';

@Entity()
export class Vulnerability {
    @PrimaryGeneratedColumn()
    id!: number;

    @Column({ nullable: true })
    description?: string;

    @ManyToMany(() => Dependency, (dependency) => dependency.vulnerabilities)
    dependencies!: Dependency[];

    @Column({ nullable: true })
    cve?: string;

    @Column({ nullable: true })
    cwe?: string;

    @Column({ nullable: true })
    vulnerableVersionRange?: string;

    @Column()
    severity!: string;

    @Column({ nullable: true })
    cvssVersion?: string;
    
    @Column({ nullable: true, type: 'double precision' })
    cvssScore!: number;

    @Column({ nullable: true })
    cvssVector?: string;

    // Denormalization for easier queries
    @ManyToOne(() => Project, (project) => project.vulnerabilities)
    project!: Project;

    @ManyToOne(() => DetectionTool, (tool) => tool.vulnerabilities)
    tool!: DetectionTool;

    // Internal date information, nothing to do with the actual vulnerability
    @CreateDateColumn({ type: 'timestamptz' })
    createdAt!: Date;

    @UpdateDateColumn({ type: 'timestamptz' })
    updatedAt!: Date;
}
