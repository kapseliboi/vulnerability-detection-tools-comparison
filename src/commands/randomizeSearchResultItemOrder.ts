import fs from 'fs';
import { randomInt } from 'crypto';
import { promisify } from 'util';
import { GitHubSearchObject } from '../interfaces/types';

const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);

export interface Options {
    inputFiles: string[];
}

function durstenfeldShuffle<T>(array: T[]) {
    for (let i = array.length - 1; i > 0; i--) {
        let j = randomInt(0, i + 1);
        let temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
}

export async function randomizeSearchResultItemOrder(options: Options) {
    const readPromises: Promise<GitHubSearchObject>[] = [];
    for (const inputFile of options.inputFiles) {
        console.log(`Reading contents of ${inputFile} for shuffling`);
        readPromises.push(readFile(inputFile).then((val) => JSON.parse(val.toString())));
    }
    const objs = await Promise.all(readPromises);
    for (const obj of objs) {
        durstenfeldShuffle(obj.items);
    }

    const writePromises: Promise<void>[] = [];
    for (let i = 0; i < objs.length; ++i) {
        console.log(`Overwriting original contents of ${options.inputFiles[i]} with shuffled contents`);
        writePromises.push(writeFile(options.inputFiles[i], JSON.stringify(objs[i], null, 2)));
    }
    await Promise.all(writePromises);
}
