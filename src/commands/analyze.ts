import fs from 'fs';
import { runDetectionWithAllTools } from '../detectionTools';
import { FindManyOptions, getManager } from 'typeorm';
import { Project } from '../entities/project';
import { downLoadProjectAndInstallDependencies } from '../util';

export interface Options {
    inputFile?: string;
    skip?: number;
    take?: number;
    noDownloadOrInstall: boolean;
}


export async function analyze(options: Options) {
    const entityManager = getManager();
    let projects: Project[] = [];
    if (options.inputFile) {
        projects = JSON.parse(fs.readFileSync(options.inputFile, 'utf-8'));
    } else {
        const findOptions: FindManyOptions<Project> | undefined = {
            order: {
                createdAt: 'ASC',
            },
        };
        if (options.skip) {
            findOptions.skip = options.skip;
        }
        if (options.take) {
            findOptions.take = options.take;
        }
        projects = await entityManager.find(Project, findOptions);
        console.log(`Analysing ${projects.length} projects`);
    }

    for (const project of projects) {
        const lockfileDirs = await downLoadProjectAndInstallDependencies(project, false, true, options.noDownloadOrInstall, true);
        if (lockfileDirs.length === 0) {
            continue;
        }
        console.log('Starting to analyze projects for vulnerabilities');
        await runDetectionWithAllTools(project, lockfileDirs);
    }
}
