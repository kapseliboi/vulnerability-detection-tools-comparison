import fs from 'fs';
import { stringify } from 'csv';
import { getManager } from 'typeorm';
import { ToolExecution } from '../../entities/toolExecution';
import { Vulnerability } from '../../entities/vulnerability';
import { Stream } from 'stream';

export async function analyzeOverview() {
    const writeStream = fs.createWriteStream(`analyze-overview-${(new Date()).getTime()}.csv`);
    Stream.Readable.from(toolExecReader(), { objectMode: true })
        .pipe(
            stringify({
                header: true
            })
        )
        .pipe(
            writeStream,
        );

    await new Promise((resolve, reject) => {
        writeStream.on('finish', resolve);
    });
}

async function* toolExecReader() {
    const entityManager = getManager();
    const toolExecCount = await entityManager.count(ToolExecution);
    for (let i = 0; i < toolExecCount; ++i) {
        const toolExec = (await entityManager.find(
            ToolExecution,
            {
                take: 1,
                skip: i,
                relations: [
                    'tool',
                    'project',
                    'dependencies',
                    'vulnerabilities',
                ],
                order: {
                    createdAt: 'ASC',
                }
            },
        ))[0];
        console.log(`Processing results with tool ${toolExec.tool.name} ${toolExec.tool.version} for project ${toolExec.project.name}`);
        const result: any = {};
        result['Project name'] = toolExec.project.name;
        result['Commit hash'] = toolExec.project.commitHash;
        result['Number of starts'] = toolExec.project.stars;
        result['Number of commits'] = toolExec.project.commits;
        result['Number of contributors'] = toolExec.project.contributors;
        result['Number of forks'] = toolExec.project.forks;
        result['Number of issues'] = toolExec.project.issues;
        result['Main language'] = toolExec.project.mainLanguage;
        result['Number of PRs'] = toolExec.project.pullRequests;
        result['Date of last commit'] = toolExec.project.lastCommitDate.toISOString();
        result['Number of lockfiles'] = toolExec.project.lockfileCount;
        result['Tool'] = `${toolExec.tool.name} ${toolExec.tool.version}`;
        result['Reported dependencies'] = toolExec.dependencyCount;
        result['Unique dependencies'] = toolExec.dependencies.length;
        result['Unique packages'] = (await entityManager.query(
            `select COUNT(distinct p."name") from tool_execution te
            inner join dependency d on te.id = d."toolExecutionId"
            inner join package p on d."packageName" = p."name"
            where te.id = $1`,
            [ toolExec.id ],
        ))[0].count;
        result['Unique dependency paths'] = (await entityManager.query(
            `select COUNT(distinct dp."path") from tool_execution te
            inner join dependency d on te.id = d."toolExecutionId"
            inner join dependency_path dp on d.id = dp."dependencyId"
            where te.id = $1`,
            [ toolExec.id ],
        ))[0].count;
        result['Reported vulnerabilities'] = toolExec.vulnerabilityCount;
        result['Unique vulnerabilities'] = toolExec.vulnerabilities.length;
        result['Unique low severity vulns'] = toolExec.vulnerabilities.reduce(
            (count, vuln) => {
                if (isLowSeverityVulnerability(vuln)) {
                    ++count;
                }
                return count;
            },
            0,
        );
        result['Unique medium severity vulns'] = toolExec.vulnerabilities.reduce(
            (count, vuln) => {
                if (isMediumSeverityVulnerability(vuln)) {
                    ++count;
                }
                return count;
            },
            0,
        );
        result['Unique high severity vulns'] = toolExec.vulnerabilities.reduce(
            (count, vuln) => {
                if (isHighSeverityVulnerability(vuln)) {
                    ++count;
                }
                return count;
            },
            0,
        );
        result['Unique critical severity vulns'] = toolExec.vulnerabilities.reduce(
            (count, vuln) => {
                if (isCriticalSeverityVulnerability(vuln)) {
                    ++count;
                }
                return count;
            },
            0,
        );
        console.log(`Yielding ${i} result`);
        yield result;
    }
    return true;
}

function isLowSeverityVulnerability(vuln: Vulnerability) {
    return vuln.severity.toLowerCase().trim() === 'low';
}

function isMediumSeverityVulnerability(vuln: Vulnerability) {
    return vuln.severity.toLowerCase().trim() === 'medium';
}

function isHighSeverityVulnerability(vuln: Vulnerability) {
    return vuln.severity.toLowerCase().trim() === 'high';
}

function isCriticalSeverityVulnerability(vuln: Vulnerability) {
    return vuln.severity.toLowerCase().trim() === 'critical';
}
