import { getManager } from 'typeorm';
import { Dependency } from '../entities/dependency';
import { Project } from '../entities/project';
import { ToolExecution } from '../entities/toolExecution';
import { compareFnByProperty } from '../util';

export async function cleanUpVulnerabilities() {
    const entityManager = getManager();
    let projects = await entityManager.find(Project, {
        relations: [
            'toolExecutions',
            'toolExecutions.tool',
            'toolExecutions.dependencies',
            'toolExecutions.dependencies.package',
            'toolExecutions.dependencies.vulnerabilities',
        ],
        order: {
            name: 'ASC',
        },
    });
    console.log('Sorting all data for easier manipulation');
    for (const project of projects) {
        project.toolExecutions.sort(compareFnByProperty('tool.name', 'tool.version'));
        for (const toolExec of project.toolExecutions) {
            toolExec.dependencies.sort(compareFnByProperty('package.name', 'version'));
            for (const dependency of toolExec.dependencies) {
                dependency.vulnerabilities.sort(compareFnByProperty('cve', 'npmId', 'ghsaId', 'internalId'));
            }
        }
    }

    for (const project of projects) {
        const toolDepIndices = project.toolExecutions.map(() => 0);
        const toolsToProcess = project.toolExecutions.map(() => false);
        const { toolExecutions } = project;
        let moreToProcess = getToolsToProcess(toolExecutions, toolDepIndices, toolsToProcess);
        while (moreToProcess) {
            
        }
        
    }
}

function getToolsToProcess(toolExecutions: ToolExecution[], toolDepIndices: number[], toolsToProcess: boolean[]) {
    const depCandidates: Dependency[] = [];
    for (let i = 0; i < toolExecutions.length; ++i) {
        const toolExec = toolExecutions[i];
        const depIndex = toolDepIndices[i];
        depCandidates.push(toolExec.dependencies[depIndex]);
    }
    if (!depCandidates.length) {
        return false;
    }
    depCandidates.sort(compareFnByProperty('package.name', 'version'));
    const dep = depCandidates[0];
    for (let i = 0; i < toolExecutions.length; ++i) {
        const toolExec = toolExecutions[i];
        const depIndex = toolDepIndices[i];
        const depCandidate = toolExec.dependencies[depIndex];
        if (depCandidate.package.name === dep.package.name && depCandidate.version === dep.version) {
            toolsToProcess[i] = true;
        }
    }
    return true;
}
