import { FindConditions, FindManyOptions, getManager, LessThan, MoreThan, Not } from 'typeorm';
import { ToolExecution } from '../../entities/toolExecution';

export interface Options {
    after?: string;
    before?: string;
    copyExecutionDuration: boolean;
    toolExecutionId?: number;
    project?: string;
    toolId?: number;
}


export async function deleteToolExecutions(options: Options) {
    const entityManager = getManager();
    const findOptions: FindManyOptions<ToolExecution> = {
        order: {
            createdAt: 'ASC',
        },
    };
    if (options.after || options.before || options.toolExecutionId !== undefined || options.project || options.toolId) {
        const whereOpts: FindConditions<ToolExecution> = {};
        if (options.after) {
            whereOpts.createdAt = MoreThan(options.after);
        }
        if (options.before) {
            whereOpts.createdAt = LessThan(options.before);
        }
        if (options.toolExecutionId !== undefined) {
            whereOpts.id = options.toolExecutionId;
        }
        if (options.project) {
            whereOpts.project = { name: options.project };
        }
        if (options.toolId) {
            whereOpts.tool = { id: options.toolId };
        }
        findOptions.where = whereOpts;
    }
    if (options.copyExecutionDuration) {
        findOptions.relations = ['tool', 'project'];
    }
    const toolExecutions = await entityManager.find(ToolExecution, findOptions);
    if (options.copyExecutionDuration && toolExecutions.length === 1) {
        console.log(`Copying execution duration of the to be removed toolExecution to other toolExecutions with same project and tool`);
        for (const toolExec of toolExecutions) {
            const otherToolExecutions = await entityManager.find(ToolExecution, { where: { tool: toolExec.tool, project: toolExec.project, id: Not(toolExec.id) }});
            otherToolExecutions.forEach((val) => { val.durationMs = toolExec.durationMs });
            await entityManager.save(ToolExecution, otherToolExecutions);
        }
    }
    console.log(`Removing ${toolExecutions.length} tool executions`);
    await entityManager.remove(ToolExecution, toolExecutions);
}
