import _ from 'lodash';
import { getManager, Like } from 'typeorm';
import { Vulnerability } from '../entities/vulnerability';
import { confirmQuestion, question } from '../util';

export async function fixInternalIds() {
    const manager = getManager();
    console.log(`Fix vulnerabilities manually by typing the name of the field that should be used as internalId or then type 'manual' to enter the new internalId manually. You can also type 'remove' to remove the vulnerability entirely`);
    let vulnsWithBrokenInternalIds: Vulnerability[] = [];
    do {
        console.log('Fetching data from database');
        vulnsWithBrokenInternalIds = await manager.find(Vulnerability, {
            where: {
                internalId: Like('% %'),
            },
            relations: ['dependencies'],
            order: {
                internalId: 'ASC',
            },
        });
        const vuln = vulnsWithBrokenInternalIds.shift();
        if (!vuln) {
            continue;
        }
        
        console.log(`Vulnerability with broken internalId:\n${JSON.stringify(vuln, null, 2)}`);
        const newValues: Partial<Vulnerability> = {};
        while (true) {
            const answer = await question('How should this field be fixed?: ');
            if (answer === 'manual') {
                while (true) {
                    const editOtherFieldFirst = await confirmQuestion('Do you want to edit some other field first?');
                    if (editOtherFieldFirst) {
                        while (true) {
                            const fieldToEdit = await question('Field to edit: ');
                            if (!(fieldToEdit in vuln)) {
                                console.log(`${fieldToEdit} doesn't exist on Vulnerability. Try again.`);
                                continue;
                            }
                            const valueToUse = await question(`Value for ${fieldToEdit}: `);
                            const confirmValue = await confirmQuestion(`New ${fieldToEdit} is '${valueToUse}'. Is this correct?`);
                            if (confirmValue) {
                                (newValues as any)[fieldToEdit] = valueToUse;
                                break;
                            }
                        }
                    } else {
                        break;
                    }
                }
                const newInternalId = await question('Input new internalId: ');
                const verification = await verifyInternalId(newInternalId);
                if (verification) {
                    newValues.internalId = newInternalId;
                    break;
                }
            } else if (answer === 'remove') {
                const verification = await confirmQuestion('Are you sure you want to remove this vulnerability entirely?');
                if (verification) {
                    await manager.delete(Vulnerability, { id: vuln.id });
                    console.log('Succesfully deleted vulnerability');
                    break;
                }
            } else {
                const newInternalId = (vuln as any)[answer];
                if (newInternalId && typeof newInternalId !== 'object') {
                    const verification = await verifyInternalId(newInternalId);
                    if (verification) {
                        newValues['internalId'] = newInternalId;
                        break;
                    }
                }
            }
        }
        if (_.isEmpty(newValues)) {
            continue;
        }
        console.log('Updating all instances of the vulnerability with new internalId');
        const criteria = _.omit(vuln, 'id', 'dependencies', 'toolExecution', 'createdAt', 'updatedAt');
        const res = await manager.update(Vulnerability, criteria, newValues);
        console.log(JSON.stringify(res, null, 2));
    } while (vulnsWithBrokenInternalIds.length)
}

async function verifyInternalId(newInternalId: string) {
    const verification = await question(`New internalId is '${newInternalId}'. Is this correct? (y/n): `);
    if (verification.toLowerCase() === 'y') {
        return true;
    } else {
        return false;
    }
}
