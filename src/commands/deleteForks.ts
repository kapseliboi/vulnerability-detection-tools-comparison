import { AxiosInstance } from "axios";
import { getManager } from "typeorm";
import { Project } from "../entities/project";
import { deleteRepository, getGitHubRestClient } from "../util";

export interface Options {
    after?: string;
    before?: string;
}

interface GitHubRepository {
    name: string;
    full_name: string;
    fork: boolean;
}

export async function deleteForks(options: Options) {
    const entityManager = getManager();
    const projects = await entityManager.find(Project);
    const client = getGitHubRestClient();
    if (options.after || options.before) {
        const forks = await getAllForks(options, client);
        for (const fork of forks) {
            console.log(`Deleting fork of project ${fork.name}`);
            await deleteRepository(fork.full_name, client);
        }
    } else {
        for (const project of projects) {
            console.log(`Deleting fork of project ${project.name}`);
            await deleteRepository(project.forkedName, client);
        }
        console.log(`Deleted all forks`);
    }
}

async function getAllForks(options: Options, client: AxiosInstance) {
    const params: any = {};
    if (options.after) {
        params.since = options.after;
    } else if (options.before) {
        params.before = options.before;
    }
    const pageSize = 100;
    params.per_page = pageSize;
    params.sort = 'updated';
    params.direction = 'asc';
    params.page = 1;
    const repos: GitHubRepository[] = [];
    let moreResults = true;
    while (moreResults) {
        const res = await client.get<GitHubRepository[]>(`/user/repos`, { params });
        res.data
            .filter((repo) => repo.fork)
            .forEach((val) => { repos.push(val); });
        if (res.data.length === pageSize) {
            ++params.page;
        } else {
            moreResults = false;
        }
    }
    return repos;
}
