import { Project } from "../entities/project";

interface GitHubSearchLanguage {
    id: number | string | null;
    language: string;
    sizeOfCode: number;
}

interface GitHubSearchLabel {
    id: number | string | null;
    label: string;
}

export interface GitHubSearchResult {
    id: number;
    name: string;
    isFork: boolean;
    commits: number;
    branches: number;
    defaultBranch: string;
    releases: number;
    contributors: number;
    license: string;
    watchers: number;
    stargazers: number;
    forks: number;
    size: number;
    createdAt: string;
    pushedAt: string;
    updatedAt: string;
    homepage: string;
    mainLanguage: string;
    totalIssues: number;
    openIssues: number;
    totalPullRequests: number;
    openPullRequests: number;
    lastCommit: string;
    lastCommitSHA: string;
    hasWiki: boolean;
    isArchived: boolean;
    languages: GitHubSearchLanguage[];
    labels: GitHubSearchLabel[];
}

export interface GitHubSearchObject {
    items: GitHubSearchResult[];
}

export interface DetectionToolFunction {
    (project: Project, projectPath: string, resultsPath: string, packageJsonDirs: string[]): Promise<void>;
}

export interface CliAnalyzeOptions {
    inputFile?: string;
    skip?: number;
    take?: number;
}

export interface CliSelectOptions {
    inputFile: string;
    minDepCount?: number;
}

interface GitHubApiPageInfo {
    endCursor: string;
    hasNextPage: boolean;
}

export interface GitHubApiDependenciesResponse {
    repository: {
        dependencyGraphManifests: {
            nodes: [
                {
                    blobPath: string;
                    dependencies: {
                        nodes: [
                            {
                                packageManager: string;
                                packageName: string;
                                requirements: string;
                            }
                        ],
                        pageInfo: GitHubApiPageInfo;
                    }
                }
            ],
            exceedsMaxSize: boolean;
            filename: string;
            parseable: boolean;
        }
    }
}

export interface GitHubApiIssue {
    author: {
        login: string;
    },
    bodyText: string;
    body: string;
    url: string;
}

export interface GitHubApiIssuesResponse {
    search: {
        nodes: (GitHubApiIssue | {})[],
        pageInfo: GitHubApiPageInfo;
    }
}

export interface Package {
    name: string;
    version: string;
}
