import { DetectionTool } from "../entities/detectionTool";
import { Project } from "../entities/project";

interface GitHubSearchLanguage {
    id: number | string | null;
    language: string;
    sizeOfCode: number;
}

interface GitHubSearchLabel {
    id: number | string | null;
    label: string;
}

export interface GitHubSearchResult {
    id: number;
    name: string;
    isFork: boolean;
    commits: number;
    branches: number;
    defaultBranch: string;
    releases: number;
    contributors: number;
    license: string;
    watchers: number;
    stargazers: number;
    forks: number;
    size: number;
    createdAt: string;
    pushedAt: string;
    updatedAt: string;
    homepage: string;
    mainLanguage: string;
    totalIssues: number;
    openIssues: number;
    totalPullRequests: number;
    openPullRequests: number;
    lastCommit: string;
    lastCommitSHA: string;
    hasWiki: boolean;
    isArchived: boolean;
    languages: GitHubSearchLanguage[];
    labels: GitHubSearchLabel[];
}

export interface GitHubSearchObject {
    items: GitHubSearchResult[];
}

export interface DetectionToolModule {
    runScan: DetectionToolFunction;
    getDetectionTool: () => Promise<DetectionTool>;
}

export interface DetectionToolFunction {
    (project: Project, projectPath: string, resultsPath: string, packageJsonDirs: string[], tool: DetectionTool): Promise<void>;
}

export interface CliAnalyzeOptions {
    inputFile?: string;
    skip?: number;
    take?: number;
    noDownloadOrInstall: boolean;
}

export interface CliSelectOptions {
    inputFile: string;
    minDepCount: number;
    noDownloadOrInstall: boolean;
}

interface GitHubApiPageInfo {
    endCursor: string;
    hasNextPage: boolean;
}

interface GitHubApiReversePageInfo {
    startCursor: string;
    hasPreviousPage: boolean;
}

export interface GitHubApiDependencyNode {
    packageManager: string;
    packageName: string;
    requirements: string;
}

export interface GitHubApiDependencyGraphManifestsNode {
    dependencies: {
        nodes: GitHubApiDependencyNode[];
        pageInfo: GitHubApiPageInfo;
    };
    exceedsMaxSize: boolean;
    filename: string;
    parseable: boolean;
}

interface GitHubApiCwe {
    cweId: string;
    name: string;
}
export interface GitHubApiVulnerabilityAlertNode {
    securityAdvisory: {
        cvss: {
            score: number;
            vectorString: string;
        }
        cwes: {
            nodes: GitHubApiCwe[];
        }
        identifiers: {
            type: string;
            value: string;
        }[];
        origin: string;
        permalink: string;
        publishedAt: string;
        references: {
            url: string
        }[];
        severity: string;
        summary: string;
        updatedAt: string;
        withdrawnAt: string | null;
    };
    securityVulnerability: {
        firstPatchedVersion: {
            identifier: string;
        };
        package: {
            ecosystem: string;
            name: string;
        }
        severity: string;
        vulnerableVersionRange: string;
    }
    vulnerableManifestFilename: string;
    vulnerableManifestPath: string;
    vulnerableRequirements: string;
}

export interface GitHubApiVulnerabilityAlertsResponse {
    repository: {
        vulnerabilityAlerts: {
            nodes: GitHubApiVulnerabilityAlertNode[];
            pageInfo: GitHubApiPageInfo;
        }
    }
}

export interface GitHubApiDependenciesResponse {
    repository: {
        dependencyGraphManifests: {
            nodes: GitHubApiDependencyGraphManifestsNode[];
            pageInfo: GitHubApiReversePageInfo;
        }
    }
}

export interface GitHubApiDependencyCountResponse {
    repository: {
        dependencyGraphManifests: {
            nodes: {
                dependenciesCount: number;
                exceedsMaxSize: boolean;
                filename: string;
                parseable: boolean;
            }[];
        }
        defaultBranchRef: {
            target: {
                oid: string;
            } | null;
        }
    }
}

export interface GitHubApiIssue {
    author: {
        login: string;
    },
    bodyText: string;
    body: string;
    url: string;
}

export interface GitHubApiIssuesResponse {
    search: {
        nodes: (GitHubApiIssue | {})[],
        pageInfo: GitHubApiPageInfo;
    }
}

export interface Package {
    name: string;
    version: string;
}
