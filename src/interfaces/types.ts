import { DetectionTool } from "../entities/detectionTool";
import { Project } from "../entities/project";

interface GitHubSearchLanguage {
    id: number | string | null;
    language: string;
    sizeOfCode: number;
}

interface GitHubSearchLabel {
    id: number | string | null;
    label: string;
}

export interface GitHubSearchResult {
    id: number;
    name: string;
    isFork: boolean;
    commits: number;
    branches: number;
    defaultBranch: string;
    releases: number;
    contributors: number;
    license: string;
    watchers: number;
    stargazers: number;
    forks: number;
    size: number;
    createdAt: string;
    pushedAt: string;
    updatedAt: string;
    homepage: string;
    mainLanguage: string;
    totalIssues: number;
    openIssues: number;
    totalPullRequests: number;
    openPullRequests: number;
    lastCommit: string;
    lastCommitSHA: string;
    hasWiki: boolean;
    isArchived: boolean;
    languages: GitHubSearchLanguage[];
    labels: GitHubSearchLabel[];
}

export interface GitHubSearchObject {
    items: GitHubSearchResult[];
}

export interface DetectionToolModule {
    TOOL_NAME: string;
    runScan: DetectionToolFunction;
    getDetectionTool: () => Promise<DetectionTool>;
}

export interface DetectionToolFunction {
    (project: Project, projectPath: string, resultsPath: string, lockfileDirs: string[], tool: DetectionTool): Promise<void>;
}

export interface GitHubApiPageInfo {
    endCursor: string;
    hasNextPage: boolean;
}

export interface GitHubApiDependencyNode {
    packageManager: string;
    packageName: string;
    requirements: string;
}

export interface GitHubApiDependencyCountResponse {
    repository: {
        dependencyGraphManifests: {
            nodes: GitHubApiDependencyCountNode[];
            pageInfo: {
                startCursor: string;
            }
        }
        defaultBranchRef: {
            target: {
                oid: string;
            } | null;
        }
    }
}

export interface GitHubApiDependencyCountNode {
    dependenciesCount: number;
    exceedsMaxSize: boolean;
    filename: string;
    parseable: boolean;
}

export interface GitHubApiIssue {
    author: {
        login: string;
    },
    bodyText: string;
    body: string;
    url: string;
}

export interface GitHubApiIssuesResponse {
    search: {
        nodes: (GitHubApiIssue | {})[],
        pageInfo: GitHubApiPageInfo;
    }
}
